# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:55:02+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import EventsGetResponse, Type

app = MCPProxy(
    contact={'email': 'hello@redeal.io'},
    description='Access analytics for Redeal',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    title='Redeal Analytics API',
    version='1.0.0',
    servers=[
        {
            'description': 'Redeal Analytics API',
            'url': 'https://analytics.redeal.io/api/1.0.0',
        }
    ],
)


@app.get(
    '/events',
    description=""" By passing in the company, site or deal Id a set of user interaction event records is returned. For pagination of a large result set use queryexecutionid and nexttoken instead.
 """,
    tags=['event_data_analysis'],
)
def get_events(
    company: Optional[str] = None,
    site: Optional[str] = None,
    deal: Optional[str] = None,
    type: Optional[Type] = None,
    nexttoken: Optional[str] = None,
    queryexecutionid: Optional[str] = None,
):
    """
    get events for analytics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
